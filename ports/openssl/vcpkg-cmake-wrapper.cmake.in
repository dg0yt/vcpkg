set(OPENSSL_ROOT_DIR_BAK "${OPENSSL_ROOT_DIR}")
get_filename_component(OPENSSL_ROOT_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(OPENSSL_ROOT_DIR "${OPENSSL_ROOT_DIR}" PATH)
get_filename_component(OPENSSL_ROOT_DIR "${OPENSSL_ROOT_DIR}" PATH)

find_path(OPENSSL_INCLUDE_DIR NAMES openssl/ssl.h PATHS "${OPENSSL_ROOT_DIR}/include" NO_DEFAULT_PATH)
if(WIN32 AND NOT CYGWIN)
    if(MSVC)
        find_library(LIB_EAY_RELEASE NAMES libcrypto crypto PATHS "${OPENSSL_ROOT_DIR}/lib" NO_DEFAULT_PATH)
        find_library(LIB_EAY_DEBUG   NAMES libcrypto crypto PATHS "${OPENSSL_ROOT_DIR}/debug/lib" NO_DEFAULT_PATH)
        find_library(SSL_EAY_RELEASE NAMES libssl ssl PATHS "${OPENSSL_ROOT_DIR}/lib" NO_DEFAULT_PATH)
        find_library(SSL_EAY_DEBUG   NAMES libssl ssl PATHS "${OPENSSL_ROOT_DIR}/debug/lib" NO_DEFAULT_PATH)
    elseif(CMAKE_BUILD_TYPE STREQUAL "Debug")
        find_library(LIB_EAY NAMES crypto PATHS "${OPENSSL_ROOT_DIR}/debug/lib" NO_DEFAULT_PATH)
        find_library(SSL_EAY NAMES ssl PATHS "${OPENSSL_ROOT_DIR}/debug/lib" NO_DEFAULT_PATH)
    else()
        find_library(LIB_EAY NAMES crypto PATHS "${OPENSSL_ROOT_DIR}/lib" NO_DEFAULT_PATH)
        find_library(SSL_EAY NAMES ssl PATHS "${OPENSSL_ROOT_DIR}/lib" NO_DEFAULT_PATH)
    endif()
elseif(CMAKE_BUILD_TYPE STREQUAL "Debug")
    find_library(OPENSSL_CRYPTO_LIBRARY NAMES crypto PATHS "${OPENSSL_ROOT_DIR}/debug/lib" NO_DEFAULT_PATH)
    find_library(OPENSSL_SSL_LIBRARY NAMES ssl PATHS "${OPENSSL_ROOT_DIR}/debug/lib" NO_DEFAULT_PATH)
else()
    find_library(OPENSSL_CRYPTO_LIBRARY NAMES crypto PATHS "${OPENSSL_ROOT_DIR}/lib" NO_DEFAULT_PATH)
    find_library(OPENSSL_SSL_LIBRARY NAMES ssl PATHS "${OPENSSL_ROOT_DIR}/lib" NO_DEFAULT_PATH)
endif()

_find_package(${ARGS})

set(OPENSSL_ROOT_DIR "${OPENSSL_ROOT_DIR_BAK}")

if(OPENSSL_FOUND AND "static" STREQUAL "static")
    if(WIN32)
        list(APPEND OPENSSL_LIBRARIES crypt32 ws2_32)
        if(TARGET OpenSSL::Crypto)
            set_property(TARGET OpenSSL::Crypto APPEND PROPERTY INTERFACE_LINK_LIBRARIES "crypt32;ws2_32")
        endif()
        if(TARGET OpenSSL::SSL)
            set_property(TARGET OpenSSL::SSL APPEND PROPERTY INTERFACE_LINK_LIBRARIES "crypt32;ws2_32")
        endif()
    else()
        cmake_policy(PUSH)
        cmake_policy(SET CMP0057 NEW)
        find_library(OPENSSL_DL_LIBRARY NAMES dl)
        if(OPENSSL_DL_LIBRARY)
            list(APPEND OPENSSL_LIBRARIES "dl")
            if(TARGET OpenSSL::Crypto)
                set_property(TARGET OpenSSL::Crypto APPEND PROPERTY INTERFACE_LINK_LIBRARIES "dl")
            endif()
        endif()

        if("REQUIRED" IN_LIST ARGS)
           find_package(Threads REQUIRED)
        else()
           find_package(Threads)
        endif()
        list(APPEND OPENSSL_LIBRARIES ${CMAKE_THREAD_LIBS_INIT})
        if(TARGET OpenSSL::Crypto)
            set_property(TARGET OpenSSL::Crypto APPEND PROPERTY INTERFACE_LINK_LIBRARIES "Threads::Threads")
        endif()
        if(TARGET OpenSSL::SSL)
            set_property(TARGET OpenSSL::SSL APPEND PROPERTY INTERFACE_LINK_LIBRARIES "Threads::Threads")
        endif()
        cmake_policy(POP)
    endif()
endif()
